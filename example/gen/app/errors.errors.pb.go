// Code generated by protoc-gen-go-errors. DO NOT EDIT.
package app

import "fmt"

func (e *ApplicationError) Error() string {
	switch v := e.Kind.(type) {
	case *ApplicationError_Config:
		return v.Config.Error()
	case *ApplicationError_Io:
		return v.Io.Error()
	case *ApplicationError_Other:
		return v.Other.Error()
	default:
		return "unknown error"
	}
}

func (e *ApplicationError) Unwrap() error {
	switch v := e.Kind.(type) {
	case *ApplicationError_Config:
		return v.Config
	case *ApplicationError_Io:
		return v.Io
	case *ApplicationError_Other:
		return v.Other
	default:
		return nil
	}
}

func (e *ApplicationError) FromConfigError(leaf *ConfigError) *ApplicationError {
	return &ApplicationError{Kind: &ApplicationError_Config{
		Config: leaf,
	}}
}

func (e *ApplicationError) FromIOError(leaf *IOError) *ApplicationError {
	return &ApplicationError{Kind: &ApplicationError_Io{
		Io: leaf,
	}}
}

func (e *ApplicationError) FromOtherError(leaf *OtherError) *ApplicationError {
	return &ApplicationError{Kind: &ApplicationError_Other{
		Other: leaf,
	}}
}

func (e *ConfigError) Error() string {
	return fmt.Sprintf("invalid config: %v=%v", e.GetKey(), e.GetValue())
}

func (e *ConfigError) Unwrap() error {
	return nil
}

func (e *IOError) Error() string {
	return fmt.Sprintf("could not read %v: %v", e.GetPath(), e.GetCause())
}

func (e *IOError) Unwrap() error {
	return e.GetCause()
}

func (e *NotFoundError) Error() string {
	return fmt.Sprintf("not found: %v", e.GetEntity())
}

func (e *NotFoundError) Unwrap() error {
	return nil
}

func (e *OtherError) Error() string {
	return fmt.Sprintf("%v", e.GetMessage())
}

func (e *OtherError) Unwrap() error {
	return nil
}
